Terminals which are not used

   ERROR


Grammar

    0 $accept: program $end

    1 program: stmt_seq

    2 stmt_seq: stmt_seq SEMI stmt
    3         | stmt

    4 stmt: if_stmt
    5     | repeat_stmt
    6     | assign_stmt
    7     | read_stmt
    8     | write_stmt
    9     | error

   10 if_stmt: IF exp THEN stmt_seq END
   11        | IF exp THEN stmt_seq ELSE stmt_seq END

   12 repeat_stmt: REPEAT stmt_seq UNTIL exp

   13 @1: /* empty */

   14 assign_stmt: ID @1 ASSIGN exp

   15 read_stmt: READ ID

   16 write_stmt: WRITE exp

   17 exp: exp LT exp
   18    | exp GT exp
   19    | exp EQ exp
   20    | exp PLUS exp
   21    | exp MINUS exp
   22    | exp TIMES exp
   23    | exp OVER exp
   24    | LPAREN exp RPAREN
   25    | NUM
   26    | ID
   27    | error


Terminals, with rules where they appear

$end (0) 0
error (256) 9 27
IF (258) 10 11
THEN (259) 10 11
ELSE (260) 11
END (261) 10 11
REPEAT (262) 12
UNTIL (263) 12
READ (264) 15
WRITE (265) 16
ID (266) 14 15 26
NUM (267) 25
ASSIGN (268) 14
EQ (269) 19
LT (270) 17
GT (271) 18
PLUS (272) 20
MINUS (273) 21
TIMES (274) 22
OVER (275) 23
LPAREN (276) 24
RPAREN (277) 24
SEMI (278) 2
ERROR (279)


Nonterminals, with rules where they appear

$accept (25)
    on left: 0
program (26)
    on left: 1, on right: 0
stmt_seq (27)
    on left: 2 3, on right: 1 2 10 11 12
stmt (28)
    on left: 4 5 6 7 8 9, on right: 2 3
if_stmt (29)
    on left: 10 11, on right: 4
repeat_stmt (30)
    on left: 12, on right: 5
assign_stmt (31)
    on left: 14, on right: 6
@1 (32)
    on left: 13, on right: 14
read_stmt (33)
    on left: 15, on right: 7
write_stmt (34)
    on left: 16, on right: 8
exp (35)
    on left: 17 18 19 20 21 22 23 24 25 26 27, on right: 10 11 12 14
    16 17 18 19 20 21 22 23 24


state 0

    0 $accept: . program $end

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    program      go to state 7
    stmt_seq     go to state 8
    stmt         go to state 9
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


state 1

    9 stmt: error .

    $default  reduce using rule 9 (stmt)


state 2

   10 if_stmt: IF . exp THEN stmt_seq END
   11        | IF . exp THEN stmt_seq ELSE stmt_seq END

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 19


state 3

   12 repeat_stmt: REPEAT . stmt_seq UNTIL exp

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    stmt_seq     go to state 20
    stmt         go to state 9
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


state 4

   15 read_stmt: READ . ID

    ID  shift, and go to state 21


state 5

   16 write_stmt: WRITE . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 22


state 6

   14 assign_stmt: ID . @1 ASSIGN exp

    $default  reduce using rule 13 (@1)

    @1  go to state 23


state 7

    0 $accept: program . $end

    $end  shift, and go to state 24


state 8

    1 program: stmt_seq .
    2 stmt_seq: stmt_seq . SEMI stmt

    SEMI  shift, and go to state 25

    $default  reduce using rule 1 (program)


state 9

    3 stmt_seq: stmt .

    $default  reduce using rule 3 (stmt_seq)


state 10

    4 stmt: if_stmt .

    $default  reduce using rule 4 (stmt)


state 11

    5 stmt: repeat_stmt .

    $default  reduce using rule 5 (stmt)


state 12

    6 stmt: assign_stmt .

    $default  reduce using rule 6 (stmt)


state 13

    7 stmt: read_stmt .

    $default  reduce using rule 7 (stmt)


state 14

    8 stmt: write_stmt .

    $default  reduce using rule 8 (stmt)


state 15

   27 exp: error .

    $default  reduce using rule 27 (exp)


state 16

   26 exp: ID .

    $default  reduce using rule 26 (exp)


state 17

   25 exp: NUM .

    $default  reduce using rule 25 (exp)


state 18

   24 exp: LPAREN . exp RPAREN

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 26


state 19

   10 if_stmt: IF exp . THEN stmt_seq END
   11        | IF exp . THEN stmt_seq ELSE stmt_seq END
   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp

    THEN   shift, and go to state 27
    EQ     shift, and go to state 28
    LT     shift, and go to state 29
    GT     shift, and go to state 30
    PLUS   shift, and go to state 31
    MINUS  shift, and go to state 32
    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34


state 20

    2 stmt_seq: stmt_seq . SEMI stmt
   12 repeat_stmt: REPEAT stmt_seq . UNTIL exp

    UNTIL  shift, and go to state 35
    SEMI   shift, and go to state 25


state 21

   15 read_stmt: READ ID .

    $default  reduce using rule 15 (read_stmt)


state 22

   16 write_stmt: WRITE exp .
   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp

    EQ     shift, and go to state 28
    LT     shift, and go to state 29
    GT     shift, and go to state 30
    PLUS   shift, and go to state 31
    MINUS  shift, and go to state 32
    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34

    $default  reduce using rule 16 (write_stmt)


state 23

   14 assign_stmt: ID @1 . ASSIGN exp

    ASSIGN  shift, and go to state 36


state 24

    0 $accept: program $end .

    $default  accept


state 25

    2 stmt_seq: stmt_seq SEMI . stmt

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    stmt         go to state 37
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


state 26

   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp
   24    | LPAREN exp . RPAREN

    EQ      shift, and go to state 28
    LT      shift, and go to state 29
    GT      shift, and go to state 30
    PLUS    shift, and go to state 31
    MINUS   shift, and go to state 32
    TIMES   shift, and go to state 33
    OVER    shift, and go to state 34
    RPAREN  shift, and go to state 38


state 27

   10 if_stmt: IF exp THEN . stmt_seq END
   11        | IF exp THEN . stmt_seq ELSE stmt_seq END

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    stmt_seq     go to state 39
    stmt         go to state 9
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


state 28

   19 exp: exp EQ . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 40


state 29

   17 exp: exp LT . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 41


state 30

   18 exp: exp GT . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 42


state 31

   20 exp: exp PLUS . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 43


state 32

   21 exp: exp MINUS . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 44


state 33

   22 exp: exp TIMES . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 45


state 34

   23 exp: exp OVER . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 46


state 35

   12 repeat_stmt: REPEAT stmt_seq UNTIL . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 47


state 36

   14 assign_stmt: ID @1 ASSIGN . exp

    error   shift, and go to state 15
    ID      shift, and go to state 16
    NUM     shift, and go to state 17
    LPAREN  shift, and go to state 18

    exp  go to state 48


state 37

    2 stmt_seq: stmt_seq SEMI stmt .

    $default  reduce using rule 2 (stmt_seq)


state 38

   24 exp: LPAREN exp RPAREN .

    $default  reduce using rule 24 (exp)


state 39

    2 stmt_seq: stmt_seq . SEMI stmt
   10 if_stmt: IF exp THEN stmt_seq . END
   11        | IF exp THEN stmt_seq . ELSE stmt_seq END

    ELSE  shift, and go to state 49
    END   shift, and go to state 50
    SEMI  shift, and go to state 25


state 40

   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   19    | exp EQ exp .
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp

    PLUS   shift, and go to state 31
    MINUS  shift, and go to state 32
    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34

    EQ  error (nonassociative)
    LT  error (nonassociative)
    GT  error (nonassociative)

    $default  reduce using rule 19 (exp)


state 41

   17 exp: exp . LT exp
   17    | exp LT exp .
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp

    PLUS   shift, and go to state 31
    MINUS  shift, and go to state 32
    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34

    EQ  error (nonassociative)
    LT  error (nonassociative)
    GT  error (nonassociative)

    $default  reduce using rule 17 (exp)


state 42

   17 exp: exp . LT exp
   18    | exp . GT exp
   18    | exp GT exp .
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp

    PLUS   shift, and go to state 31
    MINUS  shift, and go to state 32
    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34

    EQ  error (nonassociative)
    LT  error (nonassociative)
    GT  error (nonassociative)

    $default  reduce using rule 18 (exp)


state 43

   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   20    | exp PLUS exp .
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp

    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34

    $default  reduce using rule 20 (exp)


state 44

   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   21    | exp MINUS exp .
   22    | exp . TIMES exp
   23    | exp . OVER exp

    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34

    $default  reduce using rule 21 (exp)


state 45

   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   22    | exp TIMES exp .
   23    | exp . OVER exp

    $default  reduce using rule 22 (exp)


state 46

   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp
   23    | exp OVER exp .

    $default  reduce using rule 23 (exp)


state 47

   12 repeat_stmt: REPEAT stmt_seq UNTIL exp .
   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp

    EQ     shift, and go to state 28
    LT     shift, and go to state 29
    GT     shift, and go to state 30
    PLUS   shift, and go to state 31
    MINUS  shift, and go to state 32
    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34

    $default  reduce using rule 12 (repeat_stmt)


state 48

   14 assign_stmt: ID @1 ASSIGN exp .
   17 exp: exp . LT exp
   18    | exp . GT exp
   19    | exp . EQ exp
   20    | exp . PLUS exp
   21    | exp . MINUS exp
   22    | exp . TIMES exp
   23    | exp . OVER exp

    EQ     shift, and go to state 28
    LT     shift, and go to state 29
    GT     shift, and go to state 30
    PLUS   shift, and go to state 31
    MINUS  shift, and go to state 32
    TIMES  shift, and go to state 33
    OVER   shift, and go to state 34

    $default  reduce using rule 14 (assign_stmt)


state 49

   11 if_stmt: IF exp THEN stmt_seq ELSE . stmt_seq END

    error   shift, and go to state 1
    IF      shift, and go to state 2
    REPEAT  shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    ID      shift, and go to state 6

    stmt_seq     go to state 51
    stmt         go to state 9
    if_stmt      go to state 10
    repeat_stmt  go to state 11
    assign_stmt  go to state 12
    read_stmt    go to state 13
    write_stmt   go to state 14


state 50

   10 if_stmt: IF exp THEN stmt_seq END .

    $default  reduce using rule 10 (if_stmt)


state 51

    2 stmt_seq: stmt_seq . SEMI stmt
   11 if_stmt: IF exp THEN stmt_seq ELSE stmt_seq . END

    END   shift, and go to state 52
    SEMI  shift, and go to state 25


state 52

   11 if_stmt: IF exp THEN stmt_seq ELSE stmt_seq END .

    $default  reduce using rule 11 (if_stmt)
